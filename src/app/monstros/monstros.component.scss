@import "../../variables.scss";

body {
  font-family: Roboto, Arial, sans-serif;
  margin: 0;
}

mat-sidenav {
  width: 280px;
}

.app-container {
  display: flex;
  flex-direction: column;
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
}

.app-is-mobile .app-toolbar {
  position: fixed;
  /* Make sure the toolbar will stay on top of the content as it scrolls past. */
  z-index: 2;
}

h1.app-name {
  // margin-left: 8px;
}

.app-sidenav-container {
  /* When the sidenav is not fixed, stretch the sidenav container to fill the available space. This
     causes `<mat-sidenav-content>` to act as our scrolling element for desktop layouts. */
  flex: 1;
}

.app-is-mobile .app-sidenav-container {
  /* When the sidenav is fixed, don't constrain the height of the sidenav container. This allows the
     `<body>` to be our scrolling element for mobile layouts. */
  flex: 1 0 auto;
}

.app-fill-remaining-space {
  /* This fills the remaining space, by using flexbox.
     Every toolbar row uses a flexbox row layout. */
  flex: 1 1 auto;
}

.space {
  flex: 1 1 auto;
}

.avatar {
  flex-shrink: 0;
  width: 32px;
  height: 32px;
  border-radius: 50%;
  object-fit: cover;
}

.mat-nav-list a.active {
  // color: white;
  // background-color: #616161;
  // background-color: #e0e0e0; // grey, 300
  background-color: map-get($app-active, default);
}

// .active-list-item {
//   color: #3F51B5 !important;
// }

.red-icon {
  color: red;
}
/* Note: If you're using an SVG icon, you should make the class target the `<svg>` element */
.red-icon svg {
  fill: red;
}





/*
 * Actual Sticky Footer Styles
 */

 .all-wrap {
  min-height: 100vh; // same height as browser window height
}

.page-wrap {
  display: flex;
  flex-direction: column;
  min-height: 100vh; // same height as browser window height
}

.content {
  flex: 1; // child will set to an equal size inside the container
}


/*
 * Make the component injected by <router-outlet> full height:
 */

main {

  display: flex;
  flex-direction: column;

  // Select all direct descendants only of the <main> element
  // that are not <router-outlet> elements:
  > *:not(router-outlet) {

    flex: 1; // child will set to an equal size inside the container
    display: block;

  }

}
